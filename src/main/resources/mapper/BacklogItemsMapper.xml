<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.re100io.agileplatform.dao.BacklogItemsMapper">
  <resultMap id="BaseResultMap" type="com.re100io.agileplatform.entity.BacklogItems">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="project_id" jdbcType="BIGINT" property="projectId" />
    <result column="parent_id" jdbcType="BIGINT" property="parentId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="priority" jdbcType="VARCHAR" property="priority" />
    <result column="story_points" jdbcType="INTEGER" property="storyPoints" />
    <result column="business_value" jdbcType="INTEGER" property="businessValue" />
    <result column="assignee_id" jdbcType="BIGINT" property="assigneeId" />
    <result column="reporter_id" jdbcType="BIGINT" property="reporterId" />
    <result column="sprint_id" jdbcType="BIGINT" property="sprintId" />
    <result column="due_date" jdbcType="DATE" property="dueDate" />
    <result column="order_index" jdbcType="INTEGER" property="orderIndex" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="deleted_at" jdbcType="TIMESTAMP" property="deletedAt" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.re100io.agileplatform.entity.BacklogItemsWithBLOBs">
    <result column="description" jdbcType="LONGVARCHAR" property="description" />
    <result column="acceptance_criteria" jdbcType="LONGVARCHAR" property="acceptanceCriteria" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, project_id, parent_id, title, type, status, priority, story_points, business_value, 
    assignee_id, reporter_id, sprint_id, due_date, order_index, created_at, updated_at, 
    deleted_at
  </sql>
  <sql id="Blob_Column_List">
    description, acceptance_criteria
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.re100io.agileplatform.entity.BacklogItemsExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from backlog_items
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.re100io.agileplatform.entity.BacklogItemsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from backlog_items
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from backlog_items
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from backlog_items
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.re100io.agileplatform.entity.BacklogItemsExample">
    delete from backlog_items
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.re100io.agileplatform.entity.BacklogItemsWithBLOBs">
    insert into backlog_items (id, project_id, parent_id, 
      title, type, status, 
      priority, story_points, business_value, 
      assignee_id, reporter_id, sprint_id, 
      due_date, order_index, created_at, 
      updated_at, deleted_at, description, 
      acceptance_criteria)
    values (#{id,jdbcType=BIGINT}, #{projectId,jdbcType=BIGINT}, #{parentId,jdbcType=BIGINT}, 
      #{title,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, 
      #{priority,jdbcType=VARCHAR}, #{storyPoints,jdbcType=INTEGER}, #{businessValue,jdbcType=INTEGER}, 
      #{assigneeId,jdbcType=BIGINT}, #{reporterId,jdbcType=BIGINT}, #{sprintId,jdbcType=BIGINT}, 
      #{dueDate,jdbcType=DATE}, #{orderIndex,jdbcType=INTEGER}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedAt,jdbcType=TIMESTAMP}, #{deletedAt,jdbcType=TIMESTAMP}, #{description,jdbcType=LONGVARCHAR}, 
      #{acceptanceCriteria,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.re100io.agileplatform.entity.BacklogItemsWithBLOBs">
    insert into backlog_items
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="priority != null">
        priority,
      </if>
      <if test="storyPoints != null">
        story_points,
      </if>
      <if test="businessValue != null">
        business_value,
      </if>
      <if test="assigneeId != null">
        assignee_id,
      </if>
      <if test="reporterId != null">
        reporter_id,
      </if>
      <if test="sprintId != null">
        sprint_id,
      </if>
      <if test="dueDate != null">
        due_date,
      </if>
      <if test="orderIndex != null">
        order_index,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="deletedAt != null">
        deleted_at,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="acceptanceCriteria != null">
        acceptance_criteria,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=BIGINT},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="priority != null">
        #{priority,jdbcType=VARCHAR},
      </if>
      <if test="storyPoints != null">
        #{storyPoints,jdbcType=INTEGER},
      </if>
      <if test="businessValue != null">
        #{businessValue,jdbcType=INTEGER},
      </if>
      <if test="assigneeId != null">
        #{assigneeId,jdbcType=BIGINT},
      </if>
      <if test="reporterId != null">
        #{reporterId,jdbcType=BIGINT},
      </if>
      <if test="sprintId != null">
        #{sprintId,jdbcType=BIGINT},
      </if>
      <if test="dueDate != null">
        #{dueDate,jdbcType=DATE},
      </if>
      <if test="orderIndex != null">
        #{orderIndex,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedAt != null">
        #{deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null">
        #{description,jdbcType=LONGVARCHAR},
      </if>
      <if test="acceptanceCriteria != null">
        #{acceptanceCriteria,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.re100io.agileplatform.entity.BacklogItemsExample" resultType="java.lang.Long">
    select count(*) from backlog_items
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update backlog_items
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.projectId != null">
        project_id = #{record.projectId,jdbcType=BIGINT},
      </if>
      <if test="record.parentId != null">
        parent_id = #{record.parentId,jdbcType=BIGINT},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.priority != null">
        priority = #{record.priority,jdbcType=VARCHAR},
      </if>
      <if test="record.storyPoints != null">
        story_points = #{record.storyPoints,jdbcType=INTEGER},
      </if>
      <if test="record.businessValue != null">
        business_value = #{record.businessValue,jdbcType=INTEGER},
      </if>
      <if test="record.assigneeId != null">
        assignee_id = #{record.assigneeId,jdbcType=BIGINT},
      </if>
      <if test="record.reporterId != null">
        reporter_id = #{record.reporterId,jdbcType=BIGINT},
      </if>
      <if test="record.sprintId != null">
        sprint_id = #{record.sprintId,jdbcType=BIGINT},
      </if>
      <if test="record.dueDate != null">
        due_date = #{record.dueDate,jdbcType=DATE},
      </if>
      <if test="record.orderIndex != null">
        order_index = #{record.orderIndex,jdbcType=INTEGER},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deletedAt != null">
        deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.acceptanceCriteria != null">
        acceptance_criteria = #{record.acceptanceCriteria,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update backlog_items
    set id = #{record.id,jdbcType=BIGINT},
      project_id = #{record.projectId,jdbcType=BIGINT},
      parent_id = #{record.parentId,jdbcType=BIGINT},
      title = #{record.title,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR},
      priority = #{record.priority,jdbcType=VARCHAR},
      story_points = #{record.storyPoints,jdbcType=INTEGER},
      business_value = #{record.businessValue,jdbcType=INTEGER},
      assignee_id = #{record.assigneeId,jdbcType=BIGINT},
      reporter_id = #{record.reporterId,jdbcType=BIGINT},
      sprint_id = #{record.sprintId,jdbcType=BIGINT},
      due_date = #{record.dueDate,jdbcType=DATE},
      order_index = #{record.orderIndex,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
      description = #{record.description,jdbcType=LONGVARCHAR},
      acceptance_criteria = #{record.acceptanceCriteria,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update backlog_items
    set id = #{record.id,jdbcType=BIGINT},
      project_id = #{record.projectId,jdbcType=BIGINT},
      parent_id = #{record.parentId,jdbcType=BIGINT},
      title = #{record.title,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR},
      priority = #{record.priority,jdbcType=VARCHAR},
      story_points = #{record.storyPoints,jdbcType=INTEGER},
      business_value = #{record.businessValue,jdbcType=INTEGER},
      assignee_id = #{record.assigneeId,jdbcType=BIGINT},
      reporter_id = #{record.reporterId,jdbcType=BIGINT},
      sprint_id = #{record.sprintId,jdbcType=BIGINT},
      due_date = #{record.dueDate,jdbcType=DATE},
      order_index = #{record.orderIndex,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.re100io.agileplatform.entity.BacklogItemsWithBLOBs">
    update backlog_items
    <set>
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=BIGINT},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="priority != null">
        priority = #{priority,jdbcType=VARCHAR},
      </if>
      <if test="storyPoints != null">
        story_points = #{storyPoints,jdbcType=INTEGER},
      </if>
      <if test="businessValue != null">
        business_value = #{businessValue,jdbcType=INTEGER},
      </if>
      <if test="assigneeId != null">
        assignee_id = #{assigneeId,jdbcType=BIGINT},
      </if>
      <if test="reporterId != null">
        reporter_id = #{reporterId,jdbcType=BIGINT},
      </if>
      <if test="sprintId != null">
        sprint_id = #{sprintId,jdbcType=BIGINT},
      </if>
      <if test="dueDate != null">
        due_date = #{dueDate,jdbcType=DATE},
      </if>
      <if test="orderIndex != null">
        order_index = #{orderIndex,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedAt != null">
        deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=LONGVARCHAR},
      </if>
      <if test="acceptanceCriteria != null">
        acceptance_criteria = #{acceptanceCriteria,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.re100io.agileplatform.entity.BacklogItemsWithBLOBs">
    update backlog_items
    set project_id = #{projectId,jdbcType=BIGINT},
      parent_id = #{parentId,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      priority = #{priority,jdbcType=VARCHAR},
      story_points = #{storyPoints,jdbcType=INTEGER},
      business_value = #{businessValue,jdbcType=INTEGER},
      assignee_id = #{assigneeId,jdbcType=BIGINT},
      reporter_id = #{reporterId,jdbcType=BIGINT},
      sprint_id = #{sprintId,jdbcType=BIGINT},
      due_date = #{dueDate,jdbcType=DATE},
      order_index = #{orderIndex,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      description = #{description,jdbcType=LONGVARCHAR},
      acceptance_criteria = #{acceptanceCriteria,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.re100io.agileplatform.entity.BacklogItems">
    update backlog_items
    set project_id = #{projectId,jdbcType=BIGINT},
      parent_id = #{parentId,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      priority = #{priority,jdbcType=VARCHAR},
      story_points = #{storyPoints,jdbcType=INTEGER},
      business_value = #{businessValue,jdbcType=INTEGER},
      assignee_id = #{assigneeId,jdbcType=BIGINT},
      reporter_id = #{reporterId,jdbcType=BIGINT},
      sprint_id = #{sprintId,jdbcType=BIGINT},
      due_date = #{dueDate,jdbcType=DATE},
      order_index = #{orderIndex,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{deletedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <resultMap id="BaseResultMap" type="com.re100io.agileplatform.entity.BacklogItems">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="project_id" jdbcType="BIGINT" property="projectId" />
    <result column="parent_id" jdbcType="BIGINT" property="parentId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="priority" jdbcType="VARCHAR" property="priority" />
    <result column="story_points" jdbcType="INTEGER" property="storyPoints" />
    <result column="business_value" jdbcType="INTEGER" property="businessValue" />
    <result column="assignee_id" jdbcType="BIGINT" property="assigneeId" />
    <result column="reporter_id" jdbcType="BIGINT" property="reporterId" />
    <result column="sprint_id" jdbcType="BIGINT" property="sprintId" />
    <result column="due_date" jdbcType="DATE" property="dueDate" />
    <result column="order_index" jdbcType="INTEGER" property="orderIndex" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="deleted_at" jdbcType="TIMESTAMP" property="deletedAt" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.re100io.agileplatform.entity.BacklogItemsWithBLOBs">
    <result column="description" jdbcType="LONGVARCHAR" property="description" />
    <result column="acceptance_criteria" jdbcType="LONGVARCHAR" property="acceptanceCriteria" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, project_id, parent_id, title, type, status, priority, story_points, business_value, 
    assignee_id, reporter_id, sprint_id, due_date, order_index, created_at, updated_at, 
    deleted_at
  </sql>
  <sql id="Blob_Column_List">
    description, acceptance_criteria
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.re100io.agileplatform.entity.BacklogItemsExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from backlog_items
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.re100io.agileplatform.entity.BacklogItemsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from backlog_items
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from backlog_items
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from backlog_items
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.re100io.agileplatform.entity.BacklogItemsExample">
    delete from backlog_items
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.re100io.agileplatform.entity.BacklogItemsWithBLOBs">
    insert into backlog_items (id, project_id, parent_id, 
      title, type, status, 
      priority, story_points, business_value, 
      assignee_id, reporter_id, sprint_id, 
      due_date, order_index, created_at, 
      updated_at, deleted_at, description, 
      acceptance_criteria)
    values (#{id,jdbcType=BIGINT}, #{projectId,jdbcType=BIGINT}, #{parentId,jdbcType=BIGINT}, 
      #{title,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, 
      #{priority,jdbcType=VARCHAR}, #{storyPoints,jdbcType=INTEGER}, #{businessValue,jdbcType=INTEGER}, 
      #{assigneeId,jdbcType=BIGINT}, #{reporterId,jdbcType=BIGINT}, #{sprintId,jdbcType=BIGINT}, 
      #{dueDate,jdbcType=DATE}, #{orderIndex,jdbcType=INTEGER}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedAt,jdbcType=TIMESTAMP}, #{deletedAt,jdbcType=TIMESTAMP}, #{description,jdbcType=LONGVARCHAR}, 
      #{acceptanceCriteria,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.re100io.agileplatform.entity.BacklogItemsWithBLOBs">
    insert into backlog_items
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="priority != null">
        priority,
      </if>
      <if test="storyPoints != null">
        story_points,
      </if>
      <if test="businessValue != null">
        business_value,
      </if>
      <if test="assigneeId != null">
        assignee_id,
      </if>
      <if test="reporterId != null">
        reporter_id,
      </if>
      <if test="sprintId != null">
        sprint_id,
      </if>
      <if test="dueDate != null">
        due_date,
      </if>
      <if test="orderIndex != null">
        order_index,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="deletedAt != null">
        deleted_at,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="acceptanceCriteria != null">
        acceptance_criteria,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=BIGINT},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="priority != null">
        #{priority,jdbcType=VARCHAR},
      </if>
      <if test="storyPoints != null">
        #{storyPoints,jdbcType=INTEGER},
      </if>
      <if test="businessValue != null">
        #{businessValue,jdbcType=INTEGER},
      </if>
      <if test="assigneeId != null">
        #{assigneeId,jdbcType=BIGINT},
      </if>
      <if test="reporterId != null">
        #{reporterId,jdbcType=BIGINT},
      </if>
      <if test="sprintId != null">
        #{sprintId,jdbcType=BIGINT},
      </if>
      <if test="dueDate != null">
        #{dueDate,jdbcType=DATE},
      </if>
      <if test="orderIndex != null">
        #{orderIndex,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedAt != null">
        #{deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null">
        #{description,jdbcType=LONGVARCHAR},
      </if>
      <if test="acceptanceCriteria != null">
        #{acceptanceCriteria,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.re100io.agileplatform.entity.BacklogItemsExample" resultType="java.lang.Long">
    select count(*) from backlog_items
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update backlog_items
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.projectId != null">
        project_id = #{record.projectId,jdbcType=BIGINT},
      </if>
      <if test="record.parentId != null">
        parent_id = #{record.parentId,jdbcType=BIGINT},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.priority != null">
        priority = #{record.priority,jdbcType=VARCHAR},
      </if>
      <if test="record.storyPoints != null">
        story_points = #{record.storyPoints,jdbcType=INTEGER},
      </if>
      <if test="record.businessValue != null">
        business_value = #{record.businessValue,jdbcType=INTEGER},
      </if>
      <if test="record.assigneeId != null">
        assignee_id = #{record.assigneeId,jdbcType=BIGINT},
      </if>
      <if test="record.reporterId != null">
        reporter_id = #{record.reporterId,jdbcType=BIGINT},
      </if>
      <if test="record.sprintId != null">
        sprint_id = #{record.sprintId,jdbcType=BIGINT},
      </if>
      <if test="record.dueDate != null">
        due_date = #{record.dueDate,jdbcType=DATE},
      </if>
      <if test="record.orderIndex != null">
        order_index = #{record.orderIndex,jdbcType=INTEGER},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deletedAt != null">
        deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.acceptanceCriteria != null">
        acceptance_criteria = #{record.acceptanceCriteria,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update backlog_items
    set id = #{record.id,jdbcType=BIGINT},
      project_id = #{record.projectId,jdbcType=BIGINT},
      parent_id = #{record.parentId,jdbcType=BIGINT},
      title = #{record.title,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR},
      priority = #{record.priority,jdbcType=VARCHAR},
      story_points = #{record.storyPoints,jdbcType=INTEGER},
      business_value = #{record.businessValue,jdbcType=INTEGER},
      assignee_id = #{record.assigneeId,jdbcType=BIGINT},
      reporter_id = #{record.reporterId,jdbcType=BIGINT},
      sprint_id = #{record.sprintId,jdbcType=BIGINT},
      due_date = #{record.dueDate,jdbcType=DATE},
      order_index = #{record.orderIndex,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
      description = #{record.description,jdbcType=LONGVARCHAR},
      acceptance_criteria = #{record.acceptanceCriteria,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update backlog_items
    set id = #{record.id,jdbcType=BIGINT},
      project_id = #{record.projectId,jdbcType=BIGINT},
      parent_id = #{record.parentId,jdbcType=BIGINT},
      title = #{record.title,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR},
      priority = #{record.priority,jdbcType=VARCHAR},
      story_points = #{record.storyPoints,jdbcType=INTEGER},
      business_value = #{record.businessValue,jdbcType=INTEGER},
      assignee_id = #{record.assigneeId,jdbcType=BIGINT},
      reporter_id = #{record.reporterId,jdbcType=BIGINT},
      sprint_id = #{record.sprintId,jdbcType=BIGINT},
      due_date = #{record.dueDate,jdbcType=DATE},
      order_index = #{record.orderIndex,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.re100io.agileplatform.entity.BacklogItemsWithBLOBs">
    update backlog_items
    <set>
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=BIGINT},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="priority != null">
        priority = #{priority,jdbcType=VARCHAR},
      </if>
      <if test="storyPoints != null">
        story_points = #{storyPoints,jdbcType=INTEGER},
      </if>
      <if test="businessValue != null">
        business_value = #{businessValue,jdbcType=INTEGER},
      </if>
      <if test="assigneeId != null">
        assignee_id = #{assigneeId,jdbcType=BIGINT},
      </if>
      <if test="reporterId != null">
        reporter_id = #{reporterId,jdbcType=BIGINT},
      </if>
      <if test="sprintId != null">
        sprint_id = #{sprintId,jdbcType=BIGINT},
      </if>
      <if test="dueDate != null">
        due_date = #{dueDate,jdbcType=DATE},
      </if>
      <if test="orderIndex != null">
        order_index = #{orderIndex,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedAt != null">
        deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=LONGVARCHAR},
      </if>
      <if test="acceptanceCriteria != null">
        acceptance_criteria = #{acceptanceCriteria,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.re100io.agileplatform.entity.BacklogItemsWithBLOBs">
    update backlog_items
    set project_id = #{projectId,jdbcType=BIGINT},
      parent_id = #{parentId,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      priority = #{priority,jdbcType=VARCHAR},
      story_points = #{storyPoints,jdbcType=INTEGER},
      business_value = #{businessValue,jdbcType=INTEGER},
      assignee_id = #{assigneeId,jdbcType=BIGINT},
      reporter_id = #{reporterId,jdbcType=BIGINT},
      sprint_id = #{sprintId,jdbcType=BIGINT},
      due_date = #{dueDate,jdbcType=DATE},
      order_index = #{orderIndex,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      description = #{description,jdbcType=LONGVARCHAR},
      acceptance_criteria = #{acceptanceCriteria,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.re100io.agileplatform.entity.BacklogItems">
    update backlog_items
    set project_id = #{projectId,jdbcType=BIGINT},
      parent_id = #{parentId,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      priority = #{priority,jdbcType=VARCHAR},
      story_points = #{storyPoints,jdbcType=INTEGER},
      business_value = #{businessValue,jdbcType=INTEGER},
      assignee_id = #{assigneeId,jdbcType=BIGINT},
      reporter_id = #{reporterId,jdbcType=BIGINT},
      sprint_id = #{sprintId,jdbcType=BIGINT},
      due_date = #{dueDate,jdbcType=DATE},
      order_index = #{orderIndex,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{deletedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>